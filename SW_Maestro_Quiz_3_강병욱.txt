


import pandas as pd 

train_df = pd.read_pickle("soma_goods_train.df")
train_df.shape
train_df

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
d_list = []
cate_list = []

for each in train_df.iterrows():
    cate = ";".join([each[1]['cate1'],each[1]['cate2'],each[1]['cate3']])
    d_list.append(each[1]['name'])
    cate_list.append(cate)
print len(set(cate_list))
cate_dict = dict(zip(list(set(cate_list)),range(len(set(cate_list)))))
print cate_dict[u'디지털/가전;네트워크장비;KVM스위치']
print cate_dict[u'패션의류;남성의류;정장']
y_list = []
for each in train_df.iterrows():
    cate = ";".join([each[1]['cate1'],each[1]['cate2'],each[1]['cate3']])
    y_list.append(cate_dict[cate])
x_list = vectorizer.fit_transform(d_list)
from sklearn.svm import LinearSVC
from sklearn.grid_search import GridSearchCV
import numpy as np
svc_param = {'C':np.logspace(-2,0,20)}
gs_svc = GridSearchCV(LinearSVC(loss='l2'),svc_param,cv=5,n_jobs=4)
gs_svc.fit(x_list, y_list)


///////////////////////////////////////////////////////////////////////////////////////////////

print gs_svc.best_params_, gs_svc.best_score_
clf = LinearSVC(C=gs_svc.best_params_['C'])
clf.fit(x_list,y_list)
from sklearn.externals import joblib
joblib.dump(clf,'classify.model',compress=3)
joblib.dump(cate_dict,'cate_dict.dat',compress=3)
joblib.dump(vectorizer,'vectorizer.dat',compress=3)


///////////////////////////////////////////////////////////////////////////////////////////////
from sklearn.externals import joblib



clf = joblib.load('classify.model')
cate_dict = joblib.load('cate_dict.dat')
vectorizer = joblib.load('vectorizer.dat')



joblib.dump(clf,'n_classify.model')



joblib.dump(cate_dict,'n_cate_dict.dat')
joblib.dump(vectorizer,'n_vectorizer.dat')



cate_id_name_dict = dict(map(lambda (k,v):(v,k),cate_dict.items()))




pred = clf.predict(vectorizer.transform(['[신한카드5%할인][서우한복] 아동한복 여자아동 금나래 (분홍)']))[0]
print cate_id_name_dict[pred]



from bottle import route, run, template,request,get, post

import  time
from threading import  Condition
_CONDITION = Condition()
@route('/classify')
def classify():
    print "classify called"
    img = request.GET.get('img','')
    name = request.GET.get('name', '')
    pred = clf.predict(vectorizer.transform([name]))[0]
    return {'cate':cate_id_name_dict[pred]}


run(host='0.0.0.0', port=8887)





